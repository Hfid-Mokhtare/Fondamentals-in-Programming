// Me This Programme is worke only for number from 1 to 999 : 

#include <iostream>
#include <string>

using namespace std;

// Units, tens, hundreds
// Hundreds Section
// Tens, hundreds, thousands, millions, billions. 

enum enUnitsNumbers { One = 1, };



string GetNumbersFrom_1_To_9(int Number)
{
	string arrNumber[9] = { "one", "two", "three", "four", "five", "six", "seven", "eight", "nine" };
	return arrNumber[Number - 1];
}

string GetNumbersFrom_11_To_19(int Number)
{
	string arrNumber[9] = { "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };
	return arrNumber[Number - 10 - 1];
}

string GetNodalNumbers(int Number)
{
	string arrNumber[9] = { "ten","twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" };
	return arrNumber[(Number/10) - 1];
}



int CounteDigitsInNumber(int Number)
{
	int Counter = 0;

	while (Number > 0)
	{
		Number /= 10;
		Counter++;
	}
	return Counter;
}

int ReadNumber(string Message)
{
	int Number = 0;

	cout << Message;
	cin >> Number;

	return Number;
}

int ReverseNumber(int Number)
{
	int Remainder = 0, Number2 = 0;

	while (Number > 0)
	{
		Remainder = Number % 10;
		Number /= 10;
		Number2 = Number2 * 10 + Remainder;
	}
	return Number2;
}



int GetThreeDigits(int Number)
{
	Number = ReverseNumber(Number);
	string stNumber = to_string(Number);
	string HNumber = stNumber.substr(3, stNumber.length());

	return ReverseNumber(stoi(HNumber));
}



string TransacteUnitsNumbersSection(int Number)
{
	return GetNumbersFrom_1_To_9(Number);
}

string TransacteComplexNumbersSection(int Number)
{
	string stNumber = " ";

	stNumber = GetNodalNumbers((Number / 10) * 10) + " " + GetNumbersFrom_1_To_9(Number % 10);

	return stNumber;
}

string TransacteTensNumbersSection(int Number)
{
	if ((Number % 10) != 0)
	{
		if ((Number / 10) < 2)
			return GetNumbersFrom_11_To_19(Number);
		else
			return TransacteComplexNumbersSection(Number);
	}
	else
		return GetNodalNumbers(Number);
}

string TransacteHundredsNumbersSection(int Number, string Sufixe)
{
	string stNumber = "";

		stNumber = TransacteUnitsNumbersSection(Number / 100) + Sufixe;

	return stNumber;
}


void NumbersTransaction(int Number, int DigitsInNumber, string & stNumber)
{
	if (DigitsInNumber <= 0)
	{
		stNumber += " ";
	}
	else if (DigitsInNumber <= 1)
	{
		stNumber += TransacteUnitsNumbersSection(Number);
	}
	else if (DigitsInNumber <= 2)
	{
		stNumber += TransacteTensNumbersSection(Number); 
	}
	else if (DigitsInNumber <= 3)
	{
		stNumber += TransacteHundredsNumbersSection(Number, " Hundred ");
		Number = (Number % 100) * 1;
		NumbersTransaction(Number, CounteDigitsInNumber(Number)*1, stNumber);

	}
	else if (DigitsInNumber <= 6)
	{
		
		stNumber += TransacteHundredsNumbersSection(GetThreeDigits(Number), " Thousand ");
		NumbersTransaction(Number, CounteDigitsInNumber(Number) * 1, stNumber);
	}
	else if (DigitsInNumber <= 9)
	{
		NumbersTransaction(Number, CounteDigitsInNumber(Number) * 1, stNumber);
	}
	else if (DigitsInNumber <= 12)
	{
		NumbersTransaction(Number, CounteDigitsInNumber(Number) * 1, stNumber);

	}
	else
	{
		cout << "The Number is too bigue!!";
	}
	
}

int main()
{
	string stNumber = "";

	static int Number = ReadNumber("Enter a Number ? ");
	int DigitsInNumber = CounteDigitsInNumber(Number * 1);

	NumbersTransaction((Number * 1), DigitsInNumber, stNumber);

	cout << endl << stNumber;

	system("pause>0");
	return 0;
}
